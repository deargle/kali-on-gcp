#!/bin/bash -ex

apt update
apt install -y virt-manager libguestfs-tools
# add user to libvirt group
# usermod -a -G libvirt $(whoami)

systemctl start libvirtd
systemctl enable libvirtd
systemctl status libvirtd


# add virtualnetwork infosec-net
if ! virsh net-list --all | grep infosec-net ; then

  cat <<EOF > infosec-net.xml
<network>
  <name>infosec-net</name>
  <uuid>b61773a5-0d63-4415-a922-6caca824f1f7</uuid>
<forward mode='nat'/>
<bridge name='virbr1'/>
  <ip address='192.168.56.101' netmask='255.255.255.0'/>
</network>
EOF

  virsh net-define infosec-net.xml
  virsh net-start infosec-net
  rm infosec-net.xml
else
  echo "virtual network 'infosec-net' already defined, skipping..."
fi

if ! virsh net-info infosec-net | grep Active | grep yes ; then
  virsh net-start infosec-net
fi
virsh net-autostart infosec-net

# vagrant-libvirt
if ! virsh net-list --all | grep vagrant-libvirt ; then
  cat <<EOF > vagrant-libvirt-management-net.xml
  <network ipv6='yes'>
    <name>vagrant-libvirt</name>
    <uuid>0142f149-314f-41be-a587-43fc2548af39</uuid>
    <forward mode='nat'>
      <nat>
        <port start='1024' end='65535'/>
      </nat>
    </forward>
    <bridge name='virbr2' stp='on' delay='0'/>
    <mac address='52:54:00:82:3a:d1'/>
    <ip address='192.168.121.1' netmask='255.255.255.0'>
      <dhcp>
        <range start='192.168.121.1' end='192.168.121.254'/>
      </dhcp>
    </ip>
  </network>
EOF
  virsh net-define vagrant-libvirt-management-net.xml
  rm vagrant-libvirt-management-net.xml
fi

if ! virsh net-info vagrant-libvirt | grep Active | grep yes ; then
  virsh net-start vagrant-libvirt
fi
virsh net-autostart vagrant-libvirt

# default
if ! virsh net-info default | grep Active | grep yes ; then
  virsh net-start default
fi
virsh net-autostart default
